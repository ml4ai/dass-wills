# coding: utf-8

"""
    DASS Will Model Schema

    OpenAPI-style specification of the Will Model Schema   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: salena@arizona.edu, claytonm@arizona.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WMConditional(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'condition': 'WMPredicate',
        'body_if': 'WMDirectiveBody',
        'body_else': 'WMDirectiveBody',
        'dass_type': 'str'
    }

    attribute_map = {
        'condition': 'condition',
        'body_if': 'body_if',
        'body_else': 'body_else',
        'dass_type': 'dass_type'
    }

    def __init__(self, condition=None, body_if=None, body_else=None, dass_type='WM_Conditional'):  # noqa: E501
        """WMConditional - a model defined in Swagger"""  # noqa: E501
        self._condition = None
        self._body_if = None
        self._body_else = None
        self._dass_type = None
        self.discriminator = None
        self.condition = condition
        self.body_if = body_if
        self.body_else = body_else
        self.dass_type = dass_type

    @property
    def condition(self):
        """Gets the condition of this WMConditional.  # noqa: E501


        :return: The condition of this WMConditional.  # noqa: E501
        :rtype: WMPredicate
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this WMConditional.


        :param condition: The condition of this WMConditional.  # noqa: E501
        :type: WMPredicate
        """
        if condition is None:
            raise ValueError("Invalid value for `condition`, must not be `None`")  # noqa: E501

        self._condition = condition

    @property
    def body_if(self):
        """Gets the body_if of this WMConditional.  # noqa: E501


        :return: The body_if of this WMConditional.  # noqa: E501
        :rtype: WMDirectiveBody
        """
        return self._body_if

    @body_if.setter
    def body_if(self, body_if):
        """Sets the body_if of this WMConditional.


        :param body_if: The body_if of this WMConditional.  # noqa: E501
        :type: WMDirectiveBody
        """
        if body_if is None:
            raise ValueError("Invalid value for `body_if`, must not be `None`")  # noqa: E501

        self._body_if = body_if

    @property
    def body_else(self):
        """Gets the body_else of this WMConditional.  # noqa: E501


        :return: The body_else of this WMConditional.  # noqa: E501
        :rtype: WMDirectiveBody
        """
        return self._body_else

    @body_else.setter
    def body_else(self, body_else):
        """Sets the body_else of this WMConditional.


        :param body_else: The body_else of this WMConditional.  # noqa: E501
        :type: WMDirectiveBody
        """
        if body_else is None:
            raise ValueError("Invalid value for `body_else`, must not be `None`")  # noqa: E501

        self._body_else = body_else

    @property
    def dass_type(self):
        """Gets the dass_type of this WMConditional.  # noqa: E501


        :return: The dass_type of this WMConditional.  # noqa: E501
        :rtype: str
        """
        return self._dass_type

    @dass_type.setter
    def dass_type(self, dass_type):
        """Sets the dass_type of this WMConditional.


        :param dass_type: The dass_type of this WMConditional.  # noqa: E501
        :type: str
        """
        if dass_type is None:
            raise ValueError("Invalid value for `dass_type`, must not be `None`")  # noqa: E501

        self._dass_type = dass_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WMConditional, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WMConditional):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
