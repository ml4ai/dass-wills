# coding: utf-8

"""
    DASS Will Model Schema

    OpenAPI-style specification of the Will Model Schema   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: salena@arizona.edu, claytonm@arizona.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WMSExpr(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fn': 'OneOfWMSExprFn',
        'args': 'list[OneOfWMSExprArgsItems]',
        'dass_type': 'str'
    }

    attribute_map = {
        'fn': 'fn',
        'args': 'args',
        'dass_type': 'dass_type'
    }

    def __init__(self, fn=None, args=None, dass_type='WM_SExpr'):  # noqa: E501
        """WMSExpr - a model defined in Swagger"""  # noqa: E501
        self._fn = None
        self._args = None
        self._dass_type = None
        self.discriminator = None
        self.fn = fn
        if args is not None:
            self.args = args
        self.dass_type = dass_type

    @property
    def fn(self):
        """Gets the fn of this WMSExpr.  # noqa: E501


        :return: The fn of this WMSExpr.  # noqa: E501
        :rtype: OneOfWMSExprFn
        """
        return self._fn

    @fn.setter
    def fn(self, fn):
        """Sets the fn of this WMSExpr.


        :param fn: The fn of this WMSExpr.  # noqa: E501
        :type: OneOfWMSExprFn
        """
        if fn is None:
            raise ValueError("Invalid value for `fn`, must not be `None`")  # noqa: E501

        self._fn = fn

    @property
    def args(self):
        """Gets the args of this WMSExpr.  # noqa: E501


        :return: The args of this WMSExpr.  # noqa: E501
        :rtype: list[OneOfWMSExprArgsItems]
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this WMSExpr.


        :param args: The args of this WMSExpr.  # noqa: E501
        :type: list[OneOfWMSExprArgsItems]
        """

        self._args = args

    @property
    def dass_type(self):
        """Gets the dass_type of this WMSExpr.  # noqa: E501


        :return: The dass_type of this WMSExpr.  # noqa: E501
        :rtype: str
        """
        return self._dass_type

    @dass_type.setter
    def dass_type(self, dass_type):
        """Sets the dass_type of this WMSExpr.


        :param dass_type: The dass_type of this WMSExpr.  # noqa: E501
        :type: str
        """
        if dass_type is None:
            raise ValueError("Invalid value for `dass_type`, must not be `None`")  # noqa: E501

        self._dass_type = dass_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WMSExpr, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WMSExpr):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
