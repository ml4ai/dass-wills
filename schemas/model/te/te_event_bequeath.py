# coding: utf-8

"""
    DASS Text Extractions Schema

    OpenAPI-style specification of the Text Extractions Schema   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: claytonm@arizona.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from schemas.model.te.te_event import TEEvent  # noqa: F401,E501

class TEEventBequeath(TEEvent):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'testator': 'str',
        'asset': 'str',
        'benefactor': 'str',
        'bequest_condition': 'str',
        'asset_quantifier': 'str',
        'distribution': 'str'
    }
    if hasattr(TEEvent, "swagger_types"):
        swagger_types.update(TEEvent.swagger_types)

    attribute_map = {
        'testator': 'Testator',
        'asset': 'Asset',
        'benefactor': 'Benefactor',
        'bequest_condition': 'BequestCondition',
        'asset_quantifier': 'AssetQuantifier',
        'distribution': 'Distribution'
    }
    if hasattr(TEEvent, "attribute_map"):
        attribute_map.update(TEEvent.attribute_map)

    def __init__(self, testator=None, asset=None, benefactor=None, bequest_condition=None, asset_quantifier=None, distribution=None, *args, **kwargs):  # noqa: E501
        """TEEventBequeath - a model defined in Swagger"""  # noqa: E501
        self._testator = None
        self._asset = None
        self._benefactor = None
        self._bequest_condition = None
        self._asset_quantifier = None
        self._distribution = None
        self.discriminator = None
        if testator is not None:
            self.testator = testator
        if asset is not None:
            self.asset = asset
        if benefactor is not None:
            self.benefactor = benefactor
        if bequest_condition is not None:
            self.bequest_condition = bequest_condition
        if asset_quantifier is not None:
            self.asset_quantifier = asset_quantifier
        if distribution is not None:
            self.distribution = distribution
        TEEvent.__init__(self, *args, **kwargs)

    @property
    def testator(self):
        """Gets the testator of this TEEventBequeath.  # noqa: E501

        A string representing the id of the Entity that is the Testator  # noqa: E501

        :return: The testator of this TEEventBequeath.  # noqa: E501
        :rtype: str
        """
        return self._testator

    @testator.setter
    def testator(self, testator):
        """Sets the testator of this TEEventBequeath.

        A string representing the id of the Entity that is the Testator  # noqa: E501

        :param testator: The testator of this TEEventBequeath.  # noqa: E501
        :type: str
        """

        self._testator = testator

    @property
    def asset(self):
        """Gets the asset of this TEEventBequeath.  # noqa: E501

        A string representing the id of the Entity that is the Asset being bequeathed  # noqa: E501

        :return: The asset of this TEEventBequeath.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this TEEventBequeath.

        A string representing the id of the Entity that is the Asset being bequeathed  # noqa: E501

        :param asset: The asset of this TEEventBequeath.  # noqa: E501
        :type: str
        """

        self._asset = asset

    @property
    def benefactor(self):
        """Gets the benefactor of this TEEventBequeath.  # noqa: E501

        A string representing the id of the Entity that is the Benefactor  # noqa: E501

        :return: The benefactor of this TEEventBequeath.  # noqa: E501
        :rtype: str
        """
        return self._benefactor

    @benefactor.setter
    def benefactor(self, benefactor):
        """Sets the benefactor of this TEEventBequeath.

        A string representing the id of the Entity that is the Benefactor  # noqa: E501

        :param benefactor: The benefactor of this TEEventBequeath.  # noqa: E501
        :type: str
        """

        self._benefactor = benefactor

    @property
    def bequest_condition(self):
        """Gets the bequest_condition of this TEEventBequeath.  # noqa: E501

        A string that describes the condition of asset bequesting  # noqa: E501

        :return: The bequest_condition of this TEEventBequeath.  # noqa: E501
        :rtype: str
        """
        return self._bequest_condition

    @bequest_condition.setter
    def bequest_condition(self, bequest_condition):
        """Sets the bequest_condition of this TEEventBequeath.

        A string that describes the condition of asset bequesting  # noqa: E501

        :param bequest_condition: The bequest_condition of this TEEventBequeath.  # noqa: E501
        :type: str
        """

        self._bequest_condition = bequest_condition

    @property
    def asset_quantifier(self):
        """Gets the asset_quantifier of this TEEventBequeath.  # noqa: E501

        A string that quantifies the amount Asset bequeathed in text  # noqa: E501

        :return: The asset_quantifier of this TEEventBequeath.  # noqa: E501
        :rtype: str
        """
        return self._asset_quantifier

    @asset_quantifier.setter
    def asset_quantifier(self, asset_quantifier):
        """Sets the asset_quantifier of this TEEventBequeath.

        A string that quantifies the amount Asset bequeathed in text  # noqa: E501

        :param asset_quantifier: The asset_quantifier of this TEEventBequeath.  # noqa: E501
        :type: str
        """

        self._asset_quantifier = asset_quantifier

    @property
    def distribution(self):
        """Gets the distribution of this TEEventBequeath.  # noqa: E501

        The method of Asset distribution specified in text, Issue or Per Stirpes   # noqa: E501

        :return: The distribution of this TEEventBequeath.  # noqa: E501
        :rtype: str
        """
        return self._distribution

    @distribution.setter
    def distribution(self, distribution):
        """Sets the distribution of this TEEventBequeath.

        The method of Asset distribution specified in text, Issue or Per Stirpes   # noqa: E501

        :param distribution: The distribution of this TEEventBequeath.  # noqa: E501
        :type: str
        """

        self._distribution = distribution

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TEEventBequeath, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TEEventBequeath):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
