# coding: utf-8

"""
    DASS Text Extractions Schema

    OpenAPI-style specification of the Text Extractions Schema   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: claytonm@arizona.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from schemas.model.te.te_object import TEObject  # noqa: F401,E501

class TETextExtractions(TEObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'date',
        'text': 'str',
        'entities': 'list[TEEntity]',
        'events': 'list[OneOfTETextExtractionsEventsItems]'
    }
    if hasattr(TEObject, "swagger_types"):
        swagger_types.update(TEObject.swagger_types)

    attribute_map = {
        '_date': 'date',
        'text': 'text',
        'entities': 'entities',
        'events': 'events'
    }
    if hasattr(TEObject, "attribute_map"):
        attribute_map.update(TEObject.attribute_map)

    def __init__(self, _date=None, text=None, entities=None, events=None, *args, **kwargs):  # noqa: E501
        """TETextExtractions - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._text = None
        self._entities = None
        self._events = None
        self.discriminator = None
        self._date = _date
        self.text = text
        if entities is not None:
            self.entities = entities
        if events is not None:
            self.events = events
        TEObject.__init__(self, *args, **kwargs)

    @property
    def _date(self):
        """Gets the _date of this TETextExtractions.  # noqa: E501

        The date of the creation or modification of the current WillModel   # noqa: E501

        :return: The _date of this TETextExtractions.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this TETextExtractions.

        The date of the creation or modification of the current WillModel   # noqa: E501

        :param _date: The _date of this TETextExtractions.  # noqa: E501
        :type: date
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def text(self):
        """Gets the text of this TETextExtractions.  # noqa: E501

        The original raw text of the will.   # noqa: E501

        :return: The text of this TETextExtractions.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this TETextExtractions.

        The original raw text of the will.   # noqa: E501

        :param text: The text of this TETextExtractions.  # noqa: E501
        :type: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def entities(self):
        """Gets the entities of this TETextExtractions.  # noqa: E501

        The array of extracted entities   # noqa: E501

        :return: The entities of this TETextExtractions.  # noqa: E501
        :rtype: list[TEEntity]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this TETextExtractions.

        The array of extracted entities   # noqa: E501

        :param entities: The entities of this TETextExtractions.  # noqa: E501
        :type: list[TEEntity]
        """

        self._entities = entities

    @property
    def events(self):
        """Gets the events of this TETextExtractions.  # noqa: E501

        The arry of extracted events   # noqa: E501

        :return: The events of this TETextExtractions.  # noqa: E501
        :rtype: list[OneOfTETextExtractionsEventsItems]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this TETextExtractions.

        The arry of extracted events   # noqa: E501

        :param events: The events of this TETextExtractions.  # noqa: E501
        :type: list[OneOfTETextExtractionsEventsItems]
        """

        self._events = events

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TETextExtractions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TETextExtractions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
